package service

import (
	"github.com/ekokurniadi/pos-golang/entity"
	"github.com/ekokurniadi/pos-golang/input"
	"github.com/ekokurniadi/pos-golang/repository"
)

type LokasiService interface {
	LokasiServiceGetAll() ([]entity.Lokasi, error)
	LokasiServiceGetByID(inputID input.InputIDLokasi) (entity.Lokasi, error)
	LokasiServiceCreate(input input.LokasiInput) (entity.Lokasi, error)
	LokasiServiceUpdate(inputID input.InputIDLokasi, inputData input.LokasiInput) (entity.Lokasi, error)
	LokasiServiceDeleteByID(inputID input.InputIDLokasi) (bool, error)
}
type lokasiService struct {
	repository repository.LokasiRepository
}

func NewLokasiService(repository repository.LokasiRepository) *lokasiService {
	return &lokasiService{repository}
}
func (s *lokasiService) LokasiServiceCreate(input input.LokasiInput) (entity.Lokasi, error) {
	lokasi := entity.Lokasi{}
	lokasi.KodeLokasi = input.KodeLokasi
	lokasi.Lokasi = input.Lokasi
	newLokasi, err := s.repository.SaveLokasi(lokasi)
	if err != nil {
		return newLokasi, err
	}
	return newLokasi, nil
}
func (s *lokasiService) LokasiServiceUpdate(inputID input.InputIDLokasi, inputData input.LokasiInput) (entity.Lokasi, error) {
	lokasi, err := s.repository.FindByIDLokasi(inputID.ID)
	if err != nil {
		return lokasi, err
	}
	lokasi.KodeLokasi = inputData.KodeLokasi
	lokasi.Lokasi = inputData.Lokasi

	updatedLokasi, err := s.repository.UpdateLokasi(lokasi)

	if err != nil {
		return updatedLokasi, err
	}
	return updatedLokasi, nil
}
func (s *lokasiService) LokasiServiceGetByID(inputID input.InputIDLokasi) (entity.Lokasi, error) {
	lokasi, err := s.repository.FindByIDLokasi(inputID.ID)
	if err != nil {
		return lokasi, err
	}
	return lokasi, nil
}
func (s *lokasiService) LokasiServiceGetAll() ([]entity.Lokasi, error) {
	lokasis, err := s.repository.FindAllLokasi()
	if err != nil {
		return lokasis, err
	}
	return lokasis, nil
}
func (s *lokasiService) LokasiServiceDeleteByID(inputID input.InputIDLokasi) (bool, error) {
	_, err := s.repository.FindByIDLokasi(inputID.ID)
	if err != nil {
		return false, err
	}
	_, err = s.repository.DeleteByIDLokasi(inputID.ID)
	if err != nil {
		return false, err
	}
	return true, nil
}

//Generated by Micagen at 08 Desember 2021
