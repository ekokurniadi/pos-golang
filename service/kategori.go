package service

import (
	"github.com/ekokurniadi/pos-golang/entity"
	"github.com/ekokurniadi/pos-golang/input"
	"github.com/ekokurniadi/pos-golang/repository"
)

type KategoriService interface {
	KategoriServiceGetAll() ([]entity.Kategori, error)
	KategoriServiceGetByID(inputID input.InputIDKategori) (entity.Kategori, error)
	KategoriServiceCreate(input input.KategoriInput) (entity.Kategori, error)
	KategoriServiceUpdate(inputID input.InputIDKategori, inputData input.KategoriInput) (entity.Kategori, error)
	KategoriServiceDeleteByID(inputID input.InputIDKategori) (bool, error)
}
type kategoriService struct {
	repository repository.KategoriRepository
}

func NewKategoriService(repository repository.KategoriRepository) *kategoriService {
	return &kategoriService{repository}
}
func (s *kategoriService) KategoriServiceCreate(input input.KategoriInput) (entity.Kategori, error) {
	kategori := entity.Kategori{}
	kategori.Kategori = input.Kategori
	newKategori, err := s.repository.SaveKategori(kategori)
	if err != nil {
		return newKategori, err
	}
	return newKategori, nil
}
func (s *kategoriService) KategoriServiceUpdate(inputID input.InputIDKategori, inputData input.KategoriInput) (entity.Kategori, error) {
	kategori, err := s.repository.FindByIDKategori(inputID.ID)
	if err != nil {
		return kategori, err
	}
	kategori.Kategori = inputData.Kategori

	updatedKategori, err := s.repository.UpdateKategori(kategori)

	if err != nil {
		return updatedKategori, err
	}
	return updatedKategori, nil
}
func (s *kategoriService) KategoriServiceGetByID(inputID input.InputIDKategori) (entity.Kategori, error) {
	kategori, err := s.repository.FindByIDKategori(inputID.ID)
	if err != nil {
		return kategori, err
	}
	return kategori, nil
}
func (s *kategoriService) KategoriServiceGetAll() ([]entity.Kategori, error) {
	kategoris, err := s.repository.FindAllKategori()
	if err != nil {
		return kategoris, err
	}
	return kategoris, nil
}
func (s *kategoriService) KategoriServiceDeleteByID(inputID input.InputIDKategori) (bool, error) {
	_, err := s.repository.FindByIDKategori(inputID.ID)
	if err != nil {
		return false, err
	}
	_, err = s.repository.DeleteByIDKategori(inputID.ID)
	if err != nil {
		return false, err
	}
	return true, nil
}

//Generated by Micagen at 08 Desember 2021
