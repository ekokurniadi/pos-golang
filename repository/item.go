package repository

import (
	"strings"

	"github.com/ekokurniadi/pos-golang/entity"
	"github.com/ekokurniadi/pos-golang/input"
	"gorm.io/gorm"
)

type ItemRepository interface {
	SaveItem(item entity.Item) (entity.Item, error)
	UpdateItem(item entity.Item) (entity.Item, error)
	FindByIDItem(ID int) (entity.Item, error)
	FindAllItem() ([]entity.Item, error)
	DeleteByIDItem(ID int) (entity.Item, error)
	SearchItem(input input.InputFilter) ([]entity.Item, error)
}

type itemRepository struct {
	db *gorm.DB
}

func NewItemRepository(db *gorm.DB) *itemRepository {
	return &itemRepository{db}
}

func (r *itemRepository) SaveItem(item entity.Item) (entity.Item, error) {
	err := r.db.Create(&item).Error
	if err != nil {
		return item, err
	}
	return item, nil

}
func (r *itemRepository) FindByIDItem(ID int) (entity.Item, error) {
	var item entity.Item
	err := r.db.Where("id = ? ", ID).Find(&item).Error
	if err != nil {
		return item, err
	}
	return item, nil

}
func (r *itemRepository) UpdateItem(item entity.Item) (entity.Item, error) {
	err := r.db.Save(&item).Error
	if err != nil {
		return item, err
	}
	return item, nil

}

func (r *itemRepository) SearchItem(input input.InputFilter) ([]entity.Item, error) {
	var items []entity.Item
	filter := strings.Title(input.Filter)
	err := r.db.Where("nama_produk LIKE ?", "%"+filter+"%").Find(&items).Error
	if err != nil {
		return items, err
	}
	return items, nil
}

func (r *itemRepository) FindAllItem() ([]entity.Item, error) {
	var items []entity.Item
	err := r.db.Find(&items).Error
	if err != nil {
		return items, err
	}
	return items, nil

}
func (r *itemRepository) DeleteByIDItem(ID int) (entity.Item, error) {
	var item entity.Item
	err := r.db.Where("id = ? ", ID).Delete(&item).Error
	if err != nil {
		return item, err
	}
	return item, nil

}

//Generated by Micagen at 08 Desember 2021
