package repository

import (
	"github.com/ekokurniadi/pos-golang/entity"
	"gorm.io/gorm"
)

type JenisRepository interface {
	SaveJenis(jenis entity.Jenis) (entity.Jenis, error)
	UpdateJenis(jenis entity.Jenis) (entity.Jenis, error)
	FindByIDJenis(ID int) (entity.Jenis, error)
	FindAllJenis() ([]entity.Jenis, error)
	DeleteByIDJenis(ID int) (entity.Jenis, error)
}

type jenisRepository struct {
	db *gorm.DB
}

func NewJenisRepository(db *gorm.DB) *jenisRepository {
	return &jenisRepository{db}
}

func (r *jenisRepository) SaveJenis(jenis entity.Jenis) (entity.Jenis, error) {
	err := r.db.Create(&jenis).Error
	if err != nil {
		return jenis, err
	}
	return jenis, nil

}
func (r *jenisRepository) FindByIDJenis(ID int) (entity.Jenis, error) {
	var jenis entity.Jenis
	err := r.db.Where("id = ? ", ID).Find(&jenis).Error
	if err != nil {
		return jenis, err
	}
	return jenis, nil

}
func (r *jenisRepository) UpdateJenis(jenis entity.Jenis) (entity.Jenis, error) {
	err := r.db.Save(&jenis).Error
	if err != nil {
		return jenis, err
	}
	return jenis, nil

}
func (r *jenisRepository) FindAllJenis() ([]entity.Jenis, error) {
	var jeniss []entity.Jenis
	err := r.db.Find(&jeniss).Error
	if err != nil {
		return jeniss, err
	}
	return jeniss, nil

}
func (r *jenisRepository) DeleteByIDJenis(ID int) (entity.Jenis, error) {
	var jenis entity.Jenis
	err := r.db.Where("id = ? ", ID).Delete(&jenis).Error
	if err != nil {
		return jenis, err
	}
	return jenis, nil

}

//Generated by Micagen at 08 Desember 2021
