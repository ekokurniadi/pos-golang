package repository

import (
	"github.com/ekokurniadi/pos-golang/entity"
	"gorm.io/gorm"
)

type KategoriRepository interface {
	SaveKategori(kategori entity.Kategori) (entity.Kategori, error)
	UpdateKategori(kategori entity.Kategori) (entity.Kategori, error)
	FindByIDKategori(ID int) (entity.Kategori, error)
	FindAllKategori() ([]entity.Kategori, error)
	DeleteByIDKategori(ID int) (entity.Kategori, error)
}

type kategoriRepository struct {
	db *gorm.DB
}

func NewKategoriRepository(db *gorm.DB) *kategoriRepository {
	return &kategoriRepository{db}
}

func (r *kategoriRepository) SaveKategori(kategori entity.Kategori) (entity.Kategori, error) {
	err := r.db.Create(&kategori).Error
	if err != nil {
		return kategori, err
	}
	return kategori, nil

}
func (r *kategoriRepository) FindByIDKategori(ID int) (entity.Kategori, error) {
	var kategori entity.Kategori
	err := r.db.Where("id = ? ", ID).Find(&kategori).Error
	if err != nil {
		return kategori, err
	}
	return kategori, nil

}
func (r *kategoriRepository) UpdateKategori(kategori entity.Kategori) (entity.Kategori, error) {
	err := r.db.Save(&kategori).Error
	if err != nil {
		return kategori, err
	}
	return kategori, nil

}
func (r *kategoriRepository) FindAllKategori() ([]entity.Kategori, error) {
	var kategoris []entity.Kategori
	err := r.db.Find(&kategoris).Error
	if err != nil {
		return kategoris, err
	}
	return kategoris, nil

}
func (r *kategoriRepository) DeleteByIDKategori(ID int) (entity.Kategori, error) {
	var kategori entity.Kategori
	err := r.db.Where("id = ? ", ID).Delete(&kategori).Error
	if err != nil {
		return kategori, err
	}
	return kategori, nil

}

//Generated by Micagen at 08 Desember 2021
